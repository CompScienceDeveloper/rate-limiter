version: '3.8'

services:
  # Redis cluster setup for rate limiting
  redis-master:
    image: redis:7-alpine
    command: redis-server --appendonly yes --replica-read-only no
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 2s
      retries: 3
    volumes:
      - redis_data:/data
    networks:
      - rate_limiter_network

  redis-replica:
    image: redis:7-alpine
    command: redis-server --appendonly yes --replicaof redis-master 6379
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 2s
      retries: 3
    depends_on:
      - redis-master
    networks:
      - rate_limiter_network

  # Nginx Load Balancer (single entry point)
  nginx-lb:
    image: nginx:alpine
    ports:
      - "80:80"  # Single external port
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api-gateway-1
      - api-gateway-2
    restart: unless-stopped
    networks:
      - rate_limiter_network

  # API Gateway 1 (no external ports - behind load balancer)
  api-gateway-1:
    build: .
    environment:
      - ENVIRONMENT=dev
      - RATE_LIMIT_RATE=50.0
      - RATE_LIMIT_CAPACITY=100
      - REDIS_URL=redis://redis-master:6379
      - SERVICE_A_URL=http://service-a:8001
      - SERVICE_B_URL=http://service-b:8002
      - SERVICE_C_URL=http://service-c:8003
      - LOG_LEVEL=INFO
    depends_on:
      - redis-master
      - service-a
      - service-b
      - service-c
    command: uvicorn src.gateway.api_gateway:app --host 0.0.0.0 --port 8000
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request, sys; urllib.request.urlopen('http://localhost:8000/health');\" || exit 1"]
      interval: 10s
      timeout: 2s
      retries: 3
    networks:
      - rate_limiter_network

  # API Gateway 2 (no external ports - behind load balancer)
  api-gateway-2:
    build: .
    environment:
      - ENVIRONMENT=dev
      - RATE_LIMIT_RATE=50.0
      - RATE_LIMIT_CAPACITY=100
      - REDIS_URL=redis://redis-master:6379
      - SERVICE_A_URL=http://service-a:8001
      - SERVICE_B_URL=http://service-b:8002
      - SERVICE_C_URL=http://service-c:8003
      - LOG_LEVEL=INFO
    depends_on:
      - redis-master
      - service-a
      - service-b
      - service-c
    command: uvicorn src.gateway.api_gateway:app --host 0.0.0.0 --port 8000
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request, sys; urllib.request.urlopen('http://localhost:8000/health');\" || exit 1"]
      interval: 10s
      timeout: 2s
      retries: 3
    networks:
      - rate_limiter_network

  # Microservice A (no external ports - only accessible via API Gateway)
  service-a:
    build: .
    command: uvicorn src.services.service_a:app --host 0.0.0.0 --port 8001
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request, sys; urllib.request.urlopen('http://localhost:8001/health');\" || exit 1"]
      interval: 10s
      timeout: 2s
      retries: 3
    networks:
      - rate_limiter_network

  # Microservice B (no external ports - only accessible via API Gateway)
  service-b:
    build: .
    command: uvicorn src.services.service_b:app --host 0.0.0.0 --port 8002
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request, sys; urllib.request.urlopen('http://localhost:8002/health');\" || exit 1"]
      interval: 10s
      timeout: 2s
      retries: 3
    networks:
      - rate_limiter_network

  # Microservice C (no external ports - only accessible via API Gateway)
  service-c:
    build: .
    command: uvicorn src.services.service_c:app --host 0.0.0.0 --port 8003
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request, sys; urllib.request.urlopen('http://localhost:8003/health');\" || exit 1"]
      interval: 10s
      timeout: 2s
      retries: 3
    networks:
      - rate_limiter_network

volumes:
  redis_data:

networks:
  rate_limiter_network:
    driver: bridge